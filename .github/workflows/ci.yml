# .github/workflows/ci.yml
name: PiEdge EduKit CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions: { contents: read }

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lesson-ci:
    name: "${{ matrix.os }} / Python 3.12"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-14]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # Cache pip (Linux/macOS)
      - name: Cache pip (bash)
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py312-${{ hashFiles('requirements-minimal.txt') }}
          restore-keys: |
            ${{ runner.os }}-py312-

      # Cache pip (Windows)
      - name: Cache pip (pwsh)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-py312-${{ hashFiles('requirements-minimal.txt') }}
          restore-keys: |
            ${{ runner.os }}-py312-

      # ----- Linux/macOS path -----
      - name: Create venv + install (bash)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -e
          python -V
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements-minimal.txt
          pip list

      - name: Preflight info (bash)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          source .venv/bin/activate
          python -c "import onnxruntime as ort, sys, platform; print('ORT', ort.__version__, 'providers', ort.get_available_providers()); print('PY', sys.version); print(platform.platform())" || true

      - name: Run micro-lesson (bash)
        if: runner.os != 'Windows'
        shell: bash
        env:
          PYTHONHASHSEED: "0"
        run: |
          set -e
          source .venv/bin/activate
          python -m piedge_edukit.train --fakedata --output-dir ./models
          python -m piedge_edukit.benchmark --fakedata --model-path ./models/model.onnx --warmup 5 --runs 10
          python -m piedge_edukit.quantization --fakedata --model-path ./models/model.onnx --calib-size 10 || true
          python scripts/evaluate_onnx.py --model ./models/model.onnx --fakedata
          python verify.py

      # ----- Windows path -----
      - name: Create venv + install (PowerShell)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -V
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install -r requirements-minimal.txt
          pip list

      - name: Preflight info (PowerShell)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate.ps1
          python -c "import onnxruntime as ort, sys, platform; print('ORT', ort.__version__, 'providers', ort.get_available_providers()); print('PY', sys.version); print(platform.platform())"

      - name: Run micro-lesson (PowerShell)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          PYTHONHASHSEED: "0"
        run: |
          .\.venv\Scripts\Activate.ps1
          python -m piedge_edukit.train --fakedata --output-dir .\models
          python -m piedge_edukit.benchmark --fakedata --model-path .\models\model.onnx --warmup 5 --runs 10
          try { python -m piedge_edukit.quantization --fakedata --model-path .\models\model.onnx --calib-size 10 } catch { Write-Host "quantization failed; continuing" }
          python scripts\evaluate_onnx.py --model .\models\model.onnx --fakedata
          python verify.py

      - name: Upload receipt and reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: progress-${{ matrix.os }}
          path: |
            progress/receipt.json
            reports/latency_summary.txt
            reports/quantization_comparison.csv
            reports/eval_summary.txt
            reports/confusion_matrix.png
          if-no-files-found: ignore
          retention-days: 30
